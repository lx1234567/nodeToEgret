// source: cs_chess.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var p_chess_pb = require('./p_chess_pb.js');
goog.object.extend(proto, p_chess_pb);
goog.exportSymbol('proto.msg.C2SMoveChess', null, global);
goog.exportSymbol('proto.msg.C2SPlayInitInfo', null, global);
goog.exportSymbol('proto.msg.S2CInitGame', null, global);
goog.exportSymbol('proto.msg.S2CPlayInitInfo', null, global);
goog.exportSymbol('proto.msg.S2CPlayMoveChess', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.S2CInitGame = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.S2CInitGame, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.S2CInitGame.displayName = 'proto.msg.S2CInitGame';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.S2CPlayInitInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.S2CPlayInitInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.S2CPlayInitInfo.displayName = 'proto.msg.S2CPlayInitInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.S2CPlayMoveChess = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.S2CPlayMoveChess, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.S2CPlayMoveChess.displayName = 'proto.msg.S2CPlayMoveChess';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.C2SMoveChess = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.C2SMoveChess, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.C2SMoveChess.displayName = 'proto.msg.C2SMoveChess';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.C2SPlayInitInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.C2SPlayInitInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.C2SPlayInitInfo.displayName = 'proto.msg.C2SPlayInitInfo';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.S2CInitGame.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.S2CInitGame.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.S2CInitGame} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.S2CInitGame.toObject = function(includeInstance, msg) {
  var f, obj = {
    player1: (f = msg.getPlayer1()) && p_chess_pb.SChessInitInfo.toObject(includeInstance, f),
    player2: (f = msg.getPlayer2()) && p_chess_pb.SChessInitInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.S2CInitGame}
 */
proto.msg.S2CInitGame.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.S2CInitGame;
  return proto.msg.S2CInitGame.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.S2CInitGame} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.S2CInitGame}
 */
proto.msg.S2CInitGame.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new p_chess_pb.SChessInitInfo;
      reader.readMessage(value,p_chess_pb.SChessInitInfo.deserializeBinaryFromReader);
      msg.setPlayer1(value);
      break;
    case 2:
      var value = new p_chess_pb.SChessInitInfo;
      reader.readMessage(value,p_chess_pb.SChessInitInfo.deserializeBinaryFromReader);
      msg.setPlayer2(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.S2CInitGame.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.S2CInitGame.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.S2CInitGame} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.S2CInitGame.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayer1();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      p_chess_pb.SChessInitInfo.serializeBinaryToWriter
    );
  }
  f = message.getPlayer2();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      p_chess_pb.SChessInitInfo.serializeBinaryToWriter
    );
  }
};


/**
 * required SChessInitInfo player1 = 1;
 * @return {!proto.msg.SChessInitInfo}
 */
proto.msg.S2CInitGame.prototype.getPlayer1 = function() {
  return /** @type{!proto.msg.SChessInitInfo} */ (
    jspb.Message.getWrapperField(this, p_chess_pb.SChessInitInfo, 1, 1));
};


/**
 * @param {!proto.msg.SChessInitInfo} value
 * @return {!proto.msg.S2CInitGame} returns this
*/
proto.msg.S2CInitGame.prototype.setPlayer1 = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.S2CInitGame} returns this
 */
proto.msg.S2CInitGame.prototype.clearPlayer1 = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.S2CInitGame.prototype.hasPlayer1 = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required SChessInitInfo player2 = 2;
 * @return {!proto.msg.SChessInitInfo}
 */
proto.msg.S2CInitGame.prototype.getPlayer2 = function() {
  return /** @type{!proto.msg.SChessInitInfo} */ (
    jspb.Message.getWrapperField(this, p_chess_pb.SChessInitInfo, 2, 1));
};


/**
 * @param {!proto.msg.SChessInitInfo} value
 * @return {!proto.msg.S2CInitGame} returns this
*/
proto.msg.S2CInitGame.prototype.setPlayer2 = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.S2CInitGame} returns this
 */
proto.msg.S2CInitGame.prototype.clearPlayer2 = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.S2CInitGame.prototype.hasPlayer2 = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.S2CPlayInitInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.S2CPlayInitInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.S2CPlayInitInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.S2CPlayInitInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    playerinfo: (f = msg.getPlayerinfo()) && p_chess_pb.SPlayerInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.S2CPlayInitInfo}
 */
proto.msg.S2CPlayInitInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.S2CPlayInitInfo;
  return proto.msg.S2CPlayInitInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.S2CPlayInitInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.S2CPlayInitInfo}
 */
proto.msg.S2CPlayInitInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new p_chess_pb.SPlayerInfo;
      reader.readMessage(value,p_chess_pb.SPlayerInfo.deserializeBinaryFromReader);
      msg.setPlayerinfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.S2CPlayInitInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.S2CPlayInitInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.S2CPlayInitInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.S2CPlayInitInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayerinfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      p_chess_pb.SPlayerInfo.serializeBinaryToWriter
    );
  }
};


/**
 * required SPlayerInfo playerInfo = 1;
 * @return {!proto.msg.SPlayerInfo}
 */
proto.msg.S2CPlayInitInfo.prototype.getPlayerinfo = function() {
  return /** @type{!proto.msg.SPlayerInfo} */ (
    jspb.Message.getWrapperField(this, p_chess_pb.SPlayerInfo, 1, 1));
};


/**
 * @param {!proto.msg.SPlayerInfo} value
 * @return {!proto.msg.S2CPlayInitInfo} returns this
*/
proto.msg.S2CPlayInitInfo.prototype.setPlayerinfo = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.S2CPlayInitInfo} returns this
 */
proto.msg.S2CPlayInitInfo.prototype.clearPlayerinfo = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.S2CPlayInitInfo.prototype.hasPlayerinfo = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.S2CPlayMoveChess.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.S2CPlayMoveChess.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.S2CPlayMoveChess} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.S2CPlayMoveChess.toObject = function(includeInstance, msg) {
  var f, obj = {
    info: (f = msg.getInfo()) && p_chess_pb.SChessMoveInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.S2CPlayMoveChess}
 */
proto.msg.S2CPlayMoveChess.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.S2CPlayMoveChess;
  return proto.msg.S2CPlayMoveChess.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.S2CPlayMoveChess} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.S2CPlayMoveChess}
 */
proto.msg.S2CPlayMoveChess.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new p_chess_pb.SChessMoveInfo;
      reader.readMessage(value,p_chess_pb.SChessMoveInfo.deserializeBinaryFromReader);
      msg.setInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.S2CPlayMoveChess.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.S2CPlayMoveChess.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.S2CPlayMoveChess} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.S2CPlayMoveChess.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      p_chess_pb.SChessMoveInfo.serializeBinaryToWriter
    );
  }
};


/**
 * required SChessMoveInfo info = 1;
 * @return {!proto.msg.SChessMoveInfo}
 */
proto.msg.S2CPlayMoveChess.prototype.getInfo = function() {
  return /** @type{!proto.msg.SChessMoveInfo} */ (
    jspb.Message.getWrapperField(this, p_chess_pb.SChessMoveInfo, 1, 1));
};


/**
 * @param {!proto.msg.SChessMoveInfo} value
 * @return {!proto.msg.S2CPlayMoveChess} returns this
*/
proto.msg.S2CPlayMoveChess.prototype.setInfo = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.S2CPlayMoveChess} returns this
 */
proto.msg.S2CPlayMoveChess.prototype.clearInfo = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.S2CPlayMoveChess.prototype.hasInfo = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.C2SMoveChess.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.C2SMoveChess.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.C2SMoveChess} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.C2SMoveChess.toObject = function(includeInstance, msg) {
  var f, obj = {
    info: (f = msg.getInfo()) && p_chess_pb.SChessMoveInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.C2SMoveChess}
 */
proto.msg.C2SMoveChess.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.C2SMoveChess;
  return proto.msg.C2SMoveChess.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.C2SMoveChess} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.C2SMoveChess}
 */
proto.msg.C2SMoveChess.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new p_chess_pb.SChessMoveInfo;
      reader.readMessage(value,p_chess_pb.SChessMoveInfo.deserializeBinaryFromReader);
      msg.setInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.C2SMoveChess.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.C2SMoveChess.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.C2SMoveChess} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.C2SMoveChess.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      p_chess_pb.SChessMoveInfo.serializeBinaryToWriter
    );
  }
};


/**
 * required SChessMoveInfo info = 1;
 * @return {!proto.msg.SChessMoveInfo}
 */
proto.msg.C2SMoveChess.prototype.getInfo = function() {
  return /** @type{!proto.msg.SChessMoveInfo} */ (
    jspb.Message.getWrapperField(this, p_chess_pb.SChessMoveInfo, 1, 1));
};


/**
 * @param {!proto.msg.SChessMoveInfo} value
 * @return {!proto.msg.C2SMoveChess} returns this
*/
proto.msg.C2SMoveChess.prototype.setInfo = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.C2SMoveChess} returns this
 */
proto.msg.C2SMoveChess.prototype.clearInfo = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.C2SMoveChess.prototype.hasInfo = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.C2SPlayInitInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.C2SPlayInitInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.C2SPlayInitInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.C2SPlayInitInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    playerinfo: (f = msg.getPlayerinfo()) && p_chess_pb.SPlayerInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.C2SPlayInitInfo}
 */
proto.msg.C2SPlayInitInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.C2SPlayInitInfo;
  return proto.msg.C2SPlayInitInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.C2SPlayInitInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.C2SPlayInitInfo}
 */
proto.msg.C2SPlayInitInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new p_chess_pb.SPlayerInfo;
      reader.readMessage(value,p_chess_pb.SPlayerInfo.deserializeBinaryFromReader);
      msg.setPlayerinfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.C2SPlayInitInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.C2SPlayInitInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.C2SPlayInitInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.C2SPlayInitInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayerinfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      p_chess_pb.SPlayerInfo.serializeBinaryToWriter
    );
  }
};


/**
 * required SPlayerInfo playerInfo = 1;
 * @return {!proto.msg.SPlayerInfo}
 */
proto.msg.C2SPlayInitInfo.prototype.getPlayerinfo = function() {
  return /** @type{!proto.msg.SPlayerInfo} */ (
    jspb.Message.getWrapperField(this, p_chess_pb.SPlayerInfo, 1, 1));
};


/**
 * @param {!proto.msg.SPlayerInfo} value
 * @return {!proto.msg.C2SPlayInitInfo} returns this
*/
proto.msg.C2SPlayInitInfo.prototype.setPlayerinfo = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.C2SPlayInitInfo} returns this
 */
proto.msg.C2SPlayInitInfo.prototype.clearPlayerinfo = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.C2SPlayInitInfo.prototype.hasPlayerinfo = function() {
  return jspb.Message.getField(this, 1) != null;
};


goog.object.extend(exports, proto.msg);
